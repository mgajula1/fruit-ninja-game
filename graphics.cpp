#include "graphics.h"
#include "globals.h"

#define YELLOW 0xFFFF00
#define GREEN 0x00FF00
#define WHITE 0xFFFFFF
#define BLACK 0x000000
#define BROWN  0xD2691E
#define DIRT   BROWN
#define RED    0xFF0000
#define ORANGE 0xFFA500

static int starfruit[121] = { //when calling, test[0]
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, ORANGE, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, ORANGE, ORANGE, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, ORANGE, ORANGE, ORANGE, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, ORANGE, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, ORANGE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

static int mango[121] = {
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, WHITE, WHITE, WHITE, WHITE, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, YELLOW, YELLOW, YELLOW, YELLOW, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, YELLOW, YELLOW, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

static int coconut[121] = {
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, BROWN, WHITE, WHITE, WHITE, WHITE, WHITE, BROWN, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, BROWN, BROWN, BROWN, BROWN, BROWN, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

static int coin[121] = {
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff000000, 0x00000000, 0x00000000, 
0x00000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff000000, 0xff000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff000000, 0x00000000, 
0x00000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff000000, 0x00000000, 
0x00000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff000000, 0xff000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff000000, 0x00000000, 
0x00000000, 0x00000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff17caf3, 0xff17caf3, 0xff17caf3, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

static int mysteryBox[121] = {
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};


void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'R') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        // else if (img[i] == '5') colors[i] = LGREY;
        // else if (img[i] == '3') colors[i] = DGREY;
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}

void draw_player(int u, int v, int key)
{
    uLCD.filled_rectangle(u, v, u+11, v+11, WHITE);
}

void draw_nothing(boundingBox b)
{
    // Erase a bounding box
    uLCD.filled_rectangle(b.topLeft.x, b.topLeft.y, b.bottomRight.x, b.bottomRight.y, BLACK);
}

void draw_bomb(boundingBox b)
{
    // Draw an apple using a filled_rectangle or get creative and use a sprite!
    uLCD.filled_rectangle(b.topLeft.x, b.topLeft.y, b.bottomRight.x, b.bottomRight.y, RED);
}

void draw_banana(boundingBox b)
{
    // Draw a banana using a filled_rectangle or get creative and use a sprite!
    uLCD.filled_rectangle(b.topLeft.x, b.topLeft.y, b.bottomRight.x, b.bottomRight.y, YELLOW);
}

void draw_starfruit(boundingBox b)
{
// Draw an orange using a filled_rectangle or get creative and use a sprite!
    //uLCD.filled_rectangle(b.topLeft.x, b.topLeft.y, b.bottomRight.x, b.bottomRight.y, ORANGE);
    //change this to ucld.blit
    uLCD.BLIT(b.topLeft.x, b.topLeft.y, 11, 11, starfruit);
    wait_us(250); 
}

void draw_coconut (boundingBox b) {
    //uLCD.filled_rectangle(b.topLeft.x, b.topLeft.y, b.bottomRight.x, b.bottomRight.y, DIRT);
    uLCD.BLIT(b.topLeft.x, b.topLeft.y, 11, 11, coconut);
    wait_us(250); 
}

void draw_mango (boundingBox b) {
    uLCD.BLIT(b.topLeft.x, b.topLeft.y, 11, 11, mango);
    wait_us(250);
}

void draw_coin (boundingBox b) {
    uLCD.BLIT(b.topLeft.x, b.topLeft.y, 11, 11, coin);
    wait_us(500);
}

void draw_mysteryBox (boundingBox b) {
    uLCD.BLIT(b.topLeft.x, b.topLeft.y, 11, 11, mysteryBox);
    wait_us(1000);
}

/*
void draw_test() {
    uLCD.BLIT(5, 5, 11, 11, test[0]);
}*/
